module send (
    input wire       clk,
    input wire       rst_n,
    input wire       done,
    input wire       read,
    input wire       write,
     input wire       write_1,
    input  reg [7:0]  address,
    input reg [15:0] address_arm,
    input  wire  [351:0]memory_data[0:50],
    input wire [13:0] memory_data_1 [0:95],
    output reg    [7:0] po_data,
    output reg       po_flag
);






 wire [7:0] data_mem0[0:50];  
 wire [7:0] data_mem1[0:50];  
 genvar i;
generate for (i=0;i<51;i=i+1)
begin : data_mem1_0

assign data_mem0[i] =2;
assign data_mem1[i] =1; 
end
endgenerate
 
        
parameter Frame_header = 16'hEA_60;
parameter Frame_finish = 16'hEB_EB;

wire [7:0] data_mem [0:10];

assign data_mem[0] = Frame_header[15:8];    
assign data_mem[1] = Frame_header[7:0];    
assign data_mem[2] =  address_arm[15:8]; 
assign data_mem [3] = address_arm[7:0];
assign data_mem [4] = address[7:0];
assign data_mem[5] =  {2'h0,memory_data_1[13][13:8]};   
assign data_mem[6] =  memory_data_1[13][7:0];
assign data_mem[7] = {memory_data_1[14][13:8]};    
assign data_mem[8] = memory_data_1[14][7:0];    
/*assign data_mem[9] = 8'h35;    
assign data_mem[10] =8'h36;    
assign data_mem[11] = 8'h37;    
assign data_mem[12] = 8'h38;    
assign data_mem[13] = 8'h39; 
assign data_mem[14] = 8'h40;
assign data_mem[15] = 8'h41;
assign data_mem[16] = 8'h51;
assign data_mem[17] = 8'h52;
assign data_mem[18] = 8'h53;    
assign data_mem[19] = 8'h54;    
assign data_mem[20] = 8'h55;    
assign data_mem[21] = 8'h56;    
assign data_mem[22] = 8'h57;    
assign data_mem[23] = 8'h58;    
assign data_mem[24] = 8'h59; 
assign data_mem[25] = 8'h66;
assign data_mem[26] = 8'h67;
assign data_mem[27] = 8'h31;
assign data_mem[28] = 8'h31;  
assign data_mem[29] = 8'h31;    
assign data_mem[30] = 8'h31;    
assign data_mem[31] = 8'h31;    
assign data_mem[32] = 8'h31;    
assign data_mem[33] = 8'h31;    
assign data_mem[34] = 8'h31;    
assign data_mem[35] = 8'h31; 
assign data_mem[36] = 8'h32;
assign data_mem[37] = 8'h32;
assign data_mem[38] = 8'h32;    
assign data_mem[39] = 8'h32;    
assign data_mem[40] = 8'h32;    
assign data_mem[41] = 8'h32;    
assign data_mem[42] = 8'h32;    
assign data_mem[43] = 8'h32;    
assign data_mem[44] = 8'h32; 
assign data_mem[45] = 8'h32;
assign data_mem[46] = 8'h32;
assign data_mem[47] = 8'h32;
assign data_mem[48] = 8'h32;
assign data_mem[49] = 8'h32;
assign data_mem[50] = 8'h36;    
assign data_mem[51] = 8'h37;    
assign data_mem[52] = 8'h38;    
assign data_mem[53] = 8'h39; 
assign data_mem[54] = 8'h40;
assign data_mem[55] = 8'h41;
assign data_mem[56] = 8'h51;
assign data_mem[57] = 8'h52;
assign data_mem[58] = 8'h53;    
assign data_mem[59] = 8'h54;    
assign data_mem[60] = 8'h55;     
assign data_mem[61] = 8'h37;    
assign data_mem[62] = 8'h38;    
assign data_mem[63] = 8'h39; 
assign data_mem[64] = 8'h40;
assign data_mem[65] = 8'h41;
assign data_mem[66] = 8'h51;
assign data_mem[67] = 8'h52;
assign data_mem[68] = 8'h53;    
assign data_mem[69] = 8'h54;    
assign data_mem[70] =8'h36;    
assign data_mem[71] = 8'h37;    
assign data_mem[72] = 8'h38;    
assign data_mem[73] = 8'h39; 
assign data_mem[74] = 8'h40;
assign data_mem[75] = 8'h41;
assign data_mem[76] = 8'h51;
assign data_mem[77] = 8'h52;
assign data_mem[78] = 8'h53;    
assign data_mem[79] = 8'h54;    
assign data_mem[80] =8'h36;    
assign data_mem[81] = 8'h37;    
assign data_mem[82] = 8'h38;    
assign data_mem[83] = 8'h39; 
assign data_mem[84] = 8'h40;
assign data_mem[85] = 8'h41;
assign data_mem[86] = 8'h51;
assign data_mem[87] = 8'h52;
assign data_mem[88] = 8'h53;    
assign data_mem[89] = 8'h54;    
assign data_mem[90] =8'h36;    
assign data_mem[91] = 8'h37;    
assign data_mem[92] = 8'h38;    
assign data_mem[93] = 8'h39; 
assign data_mem[94] = 8'h40;
assign data_mem[95] = 8'h41;
assign data_mem[96] = 8'h51;
assign data_mem[97] = 8'h52;
assign data_mem[98] = 8'h53;    
assign data_mem[99] = 8'h54;     
assign data_mem[100] =8'h36;    
assign data_mem[101] = 8'h37;    
assign data_mem[102] = 8'h38;    
assign data_mem[103] = 8'h39; 
assign data_mem[104] = 8'h40;
assign data_mem[105] = 8'h41;
assign data_mem[106] = 8'h51;
assign data_mem[107] = 8'h52;
assign data_mem[108] = 8'h53;    
assign data_mem[109] = 8'h54;    
assign data_mem[110] =8'h36;    
assign data_mem[111] = 8'h37;    
assign data_mem[112] = 8'h38;    
assign data_mem[113] = 8'h39; 
assign data_mem[114] = 8'h40;
assign data_mem[115] = 8'h41;
assign data_mem[116] = 8'h51;
assign data_mem[117] = 8'h52;
assign data_mem[118] = 8'h53;    
assign data_mem[119] = 8'h54;    
assign data_mem[120] =8'h36;    
assign data_mem[121] = 8'h37;    
assign data_mem[122] = 8'h38;    
assign data_mem[123] = 8'h39; 
assign data_mem[124] = 8'h40;
assign data_mem[125] = 8'h41;
assign data_mem[126] = 8'h51;
assign data_mem[127] = 8'h52;
assign data_mem[128] = 8'h53;    
assign data_mem[129] = 8'h54;     
assign data_mem[130] =8'h36;    
assign data_mem[131] = 8'h37;    
assign data_mem[132] = 8'h38;    
assign data_mem[133] = 8'h39; 
assign data_mem[134] = 8'h40;
assign data_mem[135] = 8'h41;
assign data_mem[136] = 8'h51;
assign data_mem[137] = 8'h52;
assign data_mem[138] = 8'h53;    
assign data_mem[139] = 8'h54;    
assign data_mem[140] =8'h36;    
assign data_mem[141] = 8'h37;    
assign data_mem[142] = 8'h38;    
assign data_mem[143] = 8'h39; 
assign data_mem[144] = 8'h40;
assign data_mem[145] = 8'h41;
assign data_mem[146] = 8'h51;
assign data_mem[147] = 8'h52;
assign data_mem[148] = 8'h53;    
assign data_mem[149] = 8'h54;    
assign data_mem[150] =8'h36;    
assign data_mem[151] = 8'h37;    
assign data_mem[152] = 8'h38;    
assign data_mem[153] = 8'h39; 
assign data_mem[154] = 8'h40;
assign data_mem[155] = 8'h41;
assign data_mem[156] = 8'h51;
assign data_mem[157] = 8'h52;
assign data_mem[158] = 8'h53;    
assign data_mem[159] = 8'h54;    
assign data_mem[160] =8'h36;    
assign data_mem[161] = 8'h37;    
assign data_mem[162] = 8'h38;    
assign data_mem[163] = 8'h39; 
assign data_mem[164] = 8'h40;
assign data_mem[165] = 8'h41;
assign data_mem[166] = 8'h51;
assign data_mem[167] = 8'h52;
assign data_mem[168] = 8'h53;    
assign data_mem[169] = 8'h54;    
assign data_mem[170] =8'h36;    
assign data_mem[171] = 8'h37;    
assign data_mem[172] = 8'h38;    
assign data_mem[173] = 8'h39; 
assign data_mem[174] = 8'h40;
assign data_mem[175] = 8'h41;
assign data_mem[176] = 8'h51;
assign data_mem[177] = 8'h52;
assign data_mem[178] = 8'h53;    
assign data_mem[179] = 8'h54;     
assign data_mem[180] =8'h36;    
assign data_mem[181] = 8'h37;    
assign data_mem[182] = 8'h38;    
assign data_mem[183] = 8'h39; 
assign data_mem[184] = 8'h40;
assign data_mem[185] = 8'h41;
assign data_mem[186] = 8'h51;
assign data_mem[187] = 8'h52;
assign data_mem[188] = 8'h53;    
assign data_mem[189] = 8'h54;    
assign data_mem[190] =8'h36;    
assign data_mem[191] = 8'h37;    
assign data_mem[192] = 8'h38;    
assign data_mem[193] = 8'h39; 
assign data_mem[194] = 8'h40;
assign data_mem[195] = 8'h41;
assign data_mem[196] = 8'h51;
assign data_mem[197] = 8'h52;
assign data_mem[198] = 8'h53;    
assign data_mem[199] = 8'h54;
assign data_mem[200] =8'h36;    
assign data_mem[201] = 8'h37;    
assign data_mem[202] = 8'h38;    
assign data_mem[203] = 8'h39; 
assign data_mem[204] = 8'h40;
assign data_mem[205] = 8'h41;
assign data_mem[206] = 8'h51;
assign data_mem[207] = 8'h52;
assign data_mem[208] = 8'h53;    
assign data_mem[209] = 8'h54;    
assign data_mem[210] =8'h36;    
assign data_mem[211] = 8'h37;    
assign data_mem[212] = 8'h38;    
assign data_mem[213] = 8'h39; 
assign data_mem[214] = 8'h40;
assign data_mem[215] = 8'h41;
assign data_mem[216] = 8'h51;
assign data_mem[217] = 8'h52;
assign data_mem[218] = 8'h53;    
assign data_mem[219] = 8'h54;    
assign data_mem[220] =8'h36;    
assign data_mem[221] = 8'h37;    
assign data_mem[222] = 8'h38;    
assign data_mem[223] = 8'h39; 
assign data_mem[224] = 8'h40;
assign data_mem[225] = 8'h41;
assign data_mem[226] = 8'h51;
assign data_mem[227] = 8'h52;
assign data_mem[228] = 8'h53;    
assign data_mem[229] = 8'h54;     
assign data_mem[230] =8'h36;    
assign data_mem[231] = 8'h37;    
assign data_mem[232] = 8'h38;    
assign data_mem[233] = 8'h39; 
assign data_mem[234] = 8'h40;
assign data_mem[235] = 8'h41;
assign data_mem[236] = 8'h51;
assign data_mem[237] = 8'h52;
assign data_mem[238] = 8'h53;    
assign data_mem[239] = 8'h54;    
assign data_mem[240] =8'h36;    
assign data_mem[241] = 8'h37;    
assign data_mem[242] = 8'h38;    
assign data_mem[243] = 8'h39; 
assign data_mem[244] = 8'h40;
assign data_mem[245] =8'h36;    
assign data_mem[246] = 8'h37;    
assign data_mem[247] = 8'h38;    
assign data_mem[248] = 8'h39; 
assign data_mem[249] = 8'h40;*/
assign data_mem[9] = Frame_finish[15:8]; 
assign data_mem[10] = Frame_finish[7:0];  


parameter idle =8'd0;
parameter s0 = 8'd1;
parameter s1 = 8'd2;
parameter s2 = 8'd3;
parameter s3 = 8'd4;
parameter s4 = 8'd5;
parameter s5 = 8'd6;
parameter s6 = 8'd7;
parameter s7 = 8'd8;
parameter s8 = 8'd9;
parameter s9 = 8'd10;
reg [7:0] state;
reg [7:0] cnt_byte_num;
always @(posedge clk , negedge rst_n) begin
    if(~rst_n)
        begin
            state <= idle;
            cnt_byte_num <= 8'd0;
            po_data <= 8'd0;
            po_flag <= 1'd0;
        end
    else
        case (state)
            idle: 
                begin
                    state <= s0;
                end
            s0:   
            begin
             if (write == 1)
                state <= s4;
             else if (read ==1 )
                state <= s1;
             else if (write_1 == 1)
                state <= s7;
                else
                state <= state;
              end
            s1: 
                begin
                    po_data <= data_mem[cnt_byte_num];
                    state <= s2;
                    po_flag <= 1'd1;
                end
            s2:
                begin
                    po_flag <= 1'd0;
                    if(done)
                        begin
                            cnt_byte_num <= cnt_byte_num + 1'd1;
                            state <= s3;
                        end
                    else
                        state <= state;
                end 
            s3:
                begin
                    if(cnt_byte_num == 8'd11)
                        begin
                            state <= idle;
                            cnt_byte_num <= 8'd0;
                        end
                    else
                        state <= s1; 
                end
             s4 :               
              begin
                    po_data <= data_mem1[cnt_byte_num];
                    state <= s5;
                    po_flag <= 1'd1;
                end
            s5:
                begin
                    po_flag <= 1'd0;
                    if(done)
                        begin
                            cnt_byte_num <= cnt_byte_num + 1'd1;
                            state <= s6;
                        end
                    else
                        state <= state;
                end 
            s6:
                begin
                    if(cnt_byte_num == 8'd2)
                        begin
                            state <= idle;
                            cnt_byte_num <= 8'd0;
                        end
                    else
                        state <= s4; 
                end   
            s7 :               
              begin
                    po_data <= data_mem0[cnt_byte_num];
                    state <= s8;
                    po_flag <= 1'd1;
                end
            s8:
                begin
                    po_flag <= 1'd0;
                    if(done)
                        begin
                            cnt_byte_num <= cnt_byte_num + 1'd1;
                            state <= s9;
                        end
                    else
                        state <= state;
                end 
            s9:
                begin
                    if(cnt_byte_num == 8'd2)
                        begin
                            state <= idle;
                            cnt_byte_num <= 8'd0;
                        end
                    else
                        state <= s7; 
                end  
            default:
                begin
                    state <= idle;
                    cnt_byte_num <= 8'd0;
                end 
        endcase
end

/*ila_1 your_instance_name1 (
	.clk(clk), // input wire clk


	.probe0(po_data), // input wire [407:0]  probe0  
	.probe1(state), // input wire [15:0]  probe1 
	.probe2(write), // input wire [7:0]  probe2 
	.probe3(cnt_byte_num), // input wire [351:0]  probe3
	.probe4(read) // input wire [0:0]  probe3
);*/


endmodule
