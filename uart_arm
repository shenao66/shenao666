module uart_arm (
    input wire sys_clk,

    input wire  OF,
    input wire[13:0]data_11,
    input  wire rx,
    output reg  [6:0]cnt,
    output wire clk_1,
    output wire oe,
    output wire tx
);


  clk_wiz_0 instance_name
   (
    // Clock out ports
    .clk_out1(clk_1),     // output clk_out1
   // Clock in ports
    .clk_in1(sys_clk)      // input clk_in1
);
wire sys_rst_n;
wire [13:0] memory_data_1 [0:95];
wire [7:0] pi_data;
wire pi_flag;
wire [7:0] po_data;
wire po_flag;
wire [351:0] data ;
wire [7:0]  byte1;
wire       done;
wire      read;
wire [7:0]address;
wire [15:0] address_arm;
assign oe = 0;
assign sys_rst_n = 1;
wire [351:0]memory_data[0:50];
parameter UART_BPS = 'd115200;
parameter CLK_FREQ = 'd50_000_000 ;
uart_rx
 #( .UART_BPS (UART_BPS),
    . CLK_FREQ (CLK_FREQ)) 
 uart_rx(
   . sys_clk       (sys_clk       ),
   . sys_rst_n     (sys_rst_n     ),
   . rx      (rx),
   .  po_data( pi_data),
   .  po_flag( pi_flag)
);

order order(
    . sys_clk  (sys_clk  ),
    . sys_rst_n(sys_rst_n),
    . po_data  (pi_data  ),
    . po_flag  (pi_flag  ),
   .  address     (address  )   ,
   . address_arm   (address_arm  )  ,
   .write_1   (write_1),
    .write   (write),
    .read     (read),
    .memory_data(memory_data)

);

send send (
   . clk    (sys_clk    ),
   . rst_n  (sys_rst_n  ),
   . done   (done   ),
   . read    (read),
   .write   (write),
   .write_1   (write_1),
      .  address     (address  )   ,
   . address_arm   (address_arm  )  ,
   .memory_data(memory_data),
   .memory_data_1(memory_data_1),
   . po_data(po_data),
   . po_flag(po_flag)
);

uart_tx
 #( .uart_bps (UART_BPS),
    . sys (CLK_FREQ)) 
uart_tx (
    . clk      (sys_clk    ),
    . rst_n    (sys_rst_n  ),
    . pi_data  (po_data    ),
    . pi_flag  (po_flag    ),
    . done      (done      ),
    . tx       (tx         )
);

STATUS_MONITOR STATUS_MONITOR(
    . clk  (clk_1),
    . OF   (OF),
    . cnt_1(cnt),
    .data  (data_11),
    . memory_data(memory_data_1)
);



endmodule
